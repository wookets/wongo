//@ sourceMappingURL=populate.map
// Generated by CoffeeScript 1.6.1
(function() {
  var async, crud, _,
    __hasProp = {}.hasOwnProperty;

  _ = require('underscore');

  async = require('async');

  crud = require(__dirname + '/../crud');

  module.exports = function(query, schema, documents, callback) {
    var path, popArray, popQuery, _i, _j, _len, _len1, _ref, _ref1, _ref2;
    if (_.isUndefined(query.populate) || _.isEmpty(query.populate)) {
      return callback();
    }
    popArray = [];
    if (_.isString(query.populate)) {
      _ref = query.populate.split(' ');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        path = _ref[_i];
        popArray.push({
          path: path
        });
      }
    } else if (_.isArray(query.populate)) {
      _ref1 = query.populate;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        path = _ref1[_j];
        popArray.push({
          path: path
        });
      }
    } else {
      _ref2 = query.propulate;
      for (path in _ref2) {
        if (!__hasProp.call(_ref2, path)) continue;
        popQuery = _ref2[path];
        popArray.push({
          path: path,
          query: popQuery
        });
      }
    }
    return async.each(popArray, function(pop, nextInLoop) {
      var doc, pop_prop, pop_type, prop, val, _ids, _k, _len2, _ref3;
      _ref3 = schema.fields;
      for (prop in _ref3) {
        val = _ref3[prop];
        if (_.isArray(val)) {
          if (prop === pop.path || val[0].populateAlias === pop.path) {
            pop_type = val[0].ref;
            pop_prop = prop;
          }
        } else {
          if (prop === pop.path || val.populateAlias === pop.path) {
            pop_type = val.ref;
            pop_prop = prop;
          }
        }
      }
      if (_.isUndefined(pop_type) || _.isUndefined(pop_prop) || _.isEmpty(pop_type)) {
        return callback(new Error('Populate property ' + pop.path + ' could not be found on schema.'));
      }
      _ids = [];
      for (_k = 0, _len2 = documents.length; _k < _len2; _k++) {
        doc = documents[_k];
        if (_.isArray(doc[pop_prop])) {
          _ids = _.union(doc[pop_prop], _ids);
        } else {
          _ids.push(doc[pop_prop]);
        }
      }
      popQuery = pop.query || {};
      if (!popQuery.where) {
        popQuery = {
          where: popQuery
        };
      }
      popQuery.where = {
        _id: {
          $in: _ids
        }
      };
      return crud.find(pop_type, popQuery, function(err, pop_docs) {
        var i, item, pop_doc, _l, _len3, _len4, _len5, _m, _n, _name, _ref4, _ref5;
        if (err) {
          return nextInLoop(err);
        }
        for (_l = 0, _len3 = documents.length; _l < _len3; _l++) {
          doc = documents[_l];
          for (_m = 0, _len4 = pop_docs.length; _m < _len4; _m++) {
            pop_doc = pop_docs[_m];
            if (_.isArray(doc[pop_prop])) {
              _ref4 = doc[pop_prop];
              for (i = _n = 0, _len5 = _ref4.length; _n < _len5; i = ++_n) {
                item = _ref4[i];
                if (pop_doc._id === item) {
                  if ((_ref5 = doc[_name = pop.path]) == null) {
                    doc[_name] = [];
                  }
                  doc[pop.path][i] = pop_doc;
                }
              }
            } else {
              if (String(pop_doc._id) === String(doc[pop_prop])) {
                doc[pop.path] = pop_doc;
              }
            }
          }
        }
        return nextInLoop();
      });
    }, callback);
  };

}).call(this);
