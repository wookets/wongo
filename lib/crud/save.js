//@ sourceMappingURL=save.map
// Generated by CoffeeScript 1.6.1
(function() {
  var ObjectID, async, modeler, mongo, mongodb, save, saveAll, _;

  _ = require('underscore');

  async = require('async');

  mongodb = require('mongodb');

  ObjectID = mongodb.ObjectID;

  modeler = require(__dirname + '/../modeler');

  mongo = require(__dirname + '/../mongo');

  exports.save = function(_type, document, where, callback) {
    var schema;
    schema = modeler.schema(_type);
    if (_.isFunction(where)) {
      callback = where;
      where = {};
    }
    if (!callback || !_.isFunction(callback)) {
      throw new Error('callback required.');
    }
    if (!document || !_.isObject(document) || _.isEmpty(document)) {
      throw new Error('document required.');
    }
    if (_.isArray(document)) {
      return saveAll(_type, document, where, callback);
    } else {
      return save(_type, document, where, callback);
    }
  };

  saveAll = function(_type, documents, where, callback) {
    return async.each(documents, function(doc, nextInLoop) {
      return exports.save(_type, doc, where, nextInLoop);
    }, function(err) {
      return callback(err, documents);
    });
  };

  save = function(_type, document, where, callback) {
    var schema;
    schema = modeler.schema(_type);
    return async.series([
      function(next) {
        return mongo.ifConnected(next);
      }, function(next) {
        return async.eachSeries(schema.middleware.beforeValidate, function(func, nextInLoop) {
          return func(document, schema, nextInLoop);
        }, next);
      }, function(next) {
        return async.eachSeries(schema.middleware.beforeSave, function(func, nextInLoop) {
          return func(document, schema, nextInLoop);
        }, next);
      }, function(next) {
        return async.eachSeries(schema.middleware.rightBeforeSave, function(func, nextInLoop) {
          return func(document, schema, nextInLoop);
        }, next);
      }, function(next) {
        var collection, whereX;
        collection = mongo.collection(schema.collectionName);
        if (!document._id) {
          return collection.insert(document, {
            w: 1
          }, function(err, result) {
            if (err) {
              return next(err);
            }
            document._id = result[0]._id;
            return next();
          });
        } else {
          whereX = _.clone(where);
          whereX._id = document._id;
          delete document._id;
          return collection.update(whereX, {
            $set: document
          }, {
            w: 1
          }, function(err) {
            document._id = whereX._id;
            return next(err);
          });
        }
      }, function(next) {
        return async.eachSeries(schema.middleware.afterSave, function(func, nextInLoop) {
          return func(document, schema, nextInLoop);
        }, next);
      }
    ], function(err) {
      return callback(err, document);
    });
  };

}).call(this);
