// Generated by CoffeeScript 1.6.1
(function() {
  var ObjectID, async, find, modeler, mongo, mongodb, _;

  _ = require('underscore');

  async = require('async');

  mongodb = require('mongodb');

  ObjectID = mongodb.ObjectID;

  modeler = require(__dirname + '/../modeler');

  mongo = require(__dirname + '/../mongo');

  find = require(__dirname + '/find');

  exports.remove = function(_type, documentOrId, callback) {
    var document, schema, _id;
    schema = modeler.schema(_type);
    if (!callback || !_.isFunction(callback)) {
      throw new Error('callback required.');
    }
    if (!documentOrId || _.isEmpty(documentOrId)) {
      throw new Error('documentOrId required.');
    }
    if (_.isString(documentOrId)) {
      _id = documentOrId;
    } else {
      document = documentOrId;
    }
    if (_.isArray(documentOrId)) {
      async.each(documentOrId, function(docOrId, nextInLoop) {
        return exports.remove(_type, docOrId, nextInLoop);
      }, function(err) {
        return callback(err);
      });
      return;
    }
    return async.series([
      function(next) {
        return mongo.ifConnected(next);
      }, function(next) {
        if (document) {
          return next();
        }
        return find.findById(_type, _id, function(err, result) {
          document = result;
          return next(err);
        });
      }, function(next) {
        return async.eachSeries(schema.middleware.beforeRemove, function(func, nextInLoop) {
          return func(document, schema, nextInLoop);
        }, function(err) {
          return next(err);
        });
      }, function(next) {
        var collection;
        collection = mongo.collection(_type);
        return collection.remove({
          _id: new ObjectID(document._id)
        }, {
          w: 1
        }, function(err) {
          return next(err);
        });
      }, function(next) {
        return async.eachSeries(schema.middleware.afterRemove, function(func, nextInLoop) {
          return func(document, schema, nextInLoop);
        }, function(err) {
          delete document._id;
          return next(err);
        });
      }
    ], callback);
  };

  exports.clear = function(_type, callback) {
    var schema;
    schema = modeler.schema(_type);
    if (!callback || !_.isFunction(callback)) {
      throw new Error('callback required.');
    }
    return async.series([
      function(next) {
        return mongo.ifConnected(next);
      }, function(next) {
        var collection;
        collection = mongo.collection(_type);
        return collection.remove({}, {
          w: 1
        }, function(err, result) {
          return next(err, result);
        });
      }
    ], callback);
  };

}).call(this);
