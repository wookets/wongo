//@ sourceMappingURL=validation.test.map
// Generated by CoffeeScript 1.6.1
(function() {
  var assert, wongo;

  assert = require('assert');

  wongo = require('../lib/wongo');

  wongo.schema('MockValidation', {
    fields: {
      name: {
        type: String,
        required: true,
        min: 3,
        max: 12
      },
      number: {
        type: Number,
        required: true,
        min: -1,
        max: 10
      },
      boolean: {
        type: Boolean,
        required: true
      },
      array: [
        {
          type: String,
          required: true
        }
      ],
      date: {
        type: Date,
        required: true
      },
      "enum": {
        type: String,
        required: true,
        "enum": ['woof', 'bark', 'meow']
      }
    }
  });

  describe('Wongo validation', function() {
    it('should validate name exists', function(done) {
      var vdoc;
      vdoc = {
        array: []
      };
      return wongo.save('MockValidation', vdoc, function(err, result) {
        assert.ok(err);
        assert.equal(err.message, 'name is required.');
        return done();
      });
    });
    it('should validate number exists', function(done) {
      var vdoc;
      vdoc = {
        name: 'meow',
        array: []
      };
      return wongo.save('MockValidation', vdoc, function(err, result) {
        assert.ok(err);
        assert.equal(err.message, 'number is required.');
        return done();
      });
    });
    it('should validate boolean exists', function(done) {
      var vdoc;
      vdoc = {
        name: 'meow',
        number: 0,
        array: []
      };
      return wongo.save('MockValidation', vdoc, function(err, result) {
        assert.ok(err);
        assert.equal(err.message, 'boolean is required.');
        return done();
      });
    });
    it('should validate array exists', function(done) {
      var vdoc;
      vdoc = {
        name: 'meow',
        number: 0,
        boolean: true
      };
      return wongo.save('MockValidation', vdoc, function(err, result) {
        assert.ok(err);
        assert.equal(err.message, 'array is required.');
        return done();
      });
    });
    it('should validate date exists', function(done) {
      var vdoc;
      vdoc = {
        name: 'meow',
        number: 0,
        boolean: true,
        array: []
      };
      return wongo.save('MockValidation', vdoc, function(err, result) {
        assert.ok(err);
        assert.equal(err.message, 'date is required.');
        return done();
      });
    });
    it('should validate name is a string', function(done) {
      var vdoc;
      vdoc = {
        name: 45,
        number: 0,
        boolean: true,
        array: [],
        date: new Date,
        "enum": 'woof'
      };
      return wongo.save('MockValidation', vdoc, function(err, result) {
        assert.ok(err);
        assert.equal(err.message, 'name needs to be a string.');
        return done();
      });
    });
    it('should validate date is a date', function(done) {
      var vdoc;
      vdoc = {
        name: 'meow',
        number: 0,
        boolean: true,
        array: [],
        date: 'notdate'
      };
      return wongo.save('MockValidation', vdoc, function(err, result) {
        assert.ok(err);
        assert.equal(err.message, 'date needs to be a date.');
        return done();
      });
    });
    it('should validate name is at least 3 characters long', function(done) {
      var vdoc;
      vdoc = {
        name: 'bo',
        number: 0,
        boolean: true,
        array: []
      };
      return wongo.save('MockValidation', vdoc, function(err, result) {
        assert.ok(err);
        assert.equal(err.message, 'name needs to be at least 3 characters in length.');
        return done();
      });
    });
    it('should validate name is no longer than 12 characters long', function(done) {
      var vdoc;
      vdoc = {
        name: 'boromoineinidjsd',
        number: 0,
        boolean: true,
        array: []
      };
      return wongo.save('MockValidation', vdoc, function(err, result) {
        assert.ok(err);
        assert.equal(err.message, 'name needs to be at most 12 characters in length.');
        return done();
      });
    });
    it('should validate number is greater than -1', function(done) {
      var vdoc;
      vdoc = {
        name: 'boe',
        number: -3,
        boolean: true,
        array: []
      };
      return wongo.save('MockValidation', vdoc, function(err, result) {
        assert.ok(err);
        assert.equal(err.message, 'number needs to be greater than -1.');
        return done();
      });
    });
    it('should validate number can be equal to max', function(done) {
      var vdoc;
      vdoc = {
        name: 'boe',
        number: 10,
        boolean: true,
        array: [],
        date: new Date,
        "enum": 'woof'
      };
      return wongo.save('MockValidation', vdoc, function(err, result) {
        assert.ifError(err);
        return done();
      });
    });
    it('should validate number is less than or equal to 10', function(done) {
      var vdoc;
      vdoc = {
        name: 'brood',
        number: 13,
        boolean: true,
        array: []
      };
      return wongo.save('MockValidation', vdoc, function(err, result) {
        assert.ok(err);
        assert.equal(err.message, 'number needs to be less than or equal to 10.');
        return done();
      });
    });
    return it('should validate enum is of type enum value', function(done) {
      var vdoc;
      vdoc = {
        name: 'boo',
        number: 2,
        boolean: false,
        array: [],
        date: new Date,
        "enum": 'moocow'
      };
      return wongo.save('MockValidation', vdoc, function(err, result) {
        assert.ok(err);
        assert.equal(err.message, 'enum must be valid.');
        return done();
      });
    });
  });

}).call(this);
