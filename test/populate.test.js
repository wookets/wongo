//@ sourceMappingURL=populate.test.map
// Generated by CoffeeScript 1.6.1
(function() {
  var assert, wongo;

  assert = require('assert');

  wongo = require('../lib/wongo');

  wongo.schema('MockAuthor', {
    fields: {
      name: String,
      postIds: [
        {
          type: String,
          ref: 'MockPost',
          populateAlias: 'posts'
        }
      ]
    }
  });

  wongo.schema('MockPost', {
    fields: {
      name: String,
      author: {
        type: String,
        ref: 'MockAuthor'
      }
    }
  });

  describe('Wongo Populate', function() {
    var author, posts;
    author = {
      name: 'MeowMan'
    };
    posts = [
      {
        name: 'Woof Woof No More!'
      }, {
        name: 'Kitty Kat Get Back'
      }
    ];
    it('should be able to save author', function(done) {
      return wongo.save('MockAuthor', author, function(err, result) {
        assert.ifError(err);
        assert.ok(result._id);
        author = result;
        return done();
      });
    });
    it('should be able to save posts', function(done) {
      var post, _i, _len;
      for (_i = 0, _len = posts.length; _i < _len; _i++) {
        post = posts[_i];
        post.author = author._id;
      }
      return wongo.save('MockPost', posts, function(err, result) {
        assert.ifError(err);
        assert.ok(result[0]._id && result[1]._id);
        posts = result;
        return done();
      });
    });
    it('should be able to save author posts', function(done) {
      var post, _i, _len, _ref;
      if ((_ref = author.postIds) == null) {
        author.postIds = [];
      }
      for (_i = 0, _len = posts.length; _i < _len; _i++) {
        post = posts[_i];
        author.postIds.push(post._id);
      }
      return wongo.save('MockAuthor', author, function(err, result) {
        var _ref1;
        assert.ifError(err);
        assert.equal((_ref1 = result.postIds) != null ? _ref1.length : void 0, 2);
        return done();
      });
    });
    it('should be able to find author and populate posts', function(done) {
      var query;
      query = {
        where: {},
        populate: 'posts'
      };
      return wongo.find('MockAuthor', query, function(err, result) {
        assert.ifError(err);
        assert.equal(result[0].posts[0].name, 'Woof Woof No More!');
        assert.equal(result[0].posts[1].name, 'Kitty Kat Get Back');
        return done();
      });
    });
    return it('should be able to find posts and populate author', function(done) {
      var query;
      query = {
        where: {},
        populate: 'author'
      };
      return wongo.find('MockPost', query, function(err, result) {
        assert.ifError(err);
        assert.equal(result[0].author.name, 'MeowMan');
        assert.equal(result[1].author.name, 'MeowMan');
        return done();
      });
    });
  });

}).call(this);
