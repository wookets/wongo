//@ sourceMappingURL=plugins.test.map
// Generated by CoffeeScript 1.6.1
(function() {
  var assert, wongo, _;

  assert = require('assert');

  wongo = require('../lib/wongo');

  _ = require('underscore');

  wongo.schema('MockPlugin', {
    fields: {
      name: String
    },
    plugins: [wongo.plugins.timestamp]
  });

  wongo.schema('MockTree', {
    fields: {
      name: String
    },
    plugins: [wongo.plugins.atree]
  });

  describe('Wongo Plugins', function() {
    var child1, child11, root;
    it('should save a MockPlugin and have Dates created for two properties', function(done) {
      var doc;
      doc = {
        name: 'woof'
      };
      return wongo.save('MockPlugin', doc, function(err, result) {
        assert.ifError(err);
        assert.ok(result._id);
        assert.ok(result.createdOn);
        assert.ok(_.isDate(result.modifiedOn));
        assert.ok(_.isDate(result.createdOn));
        return done();
      });
    });
    it('should have attached ancestor tree methods to wongo namespace', function(done) {
      assert.ok(_.isFunction(wongo.plugins.atree));
      return done();
    });
    root = null;
    child1 = null;
    child11 = null;
    it('should set a root for the tree', function(done) {
      root = {
        name: 'Root'
      };
      return wongo.save('MockTree', root, function(err, result) {
        root = result;
        assert.ok(_.isArray(root.ancestors));
        return done();
      });
    });
    it('should add a child to the root', function(done) {
      child1 = {
        name: 'child1'
      };
      child1.ancestors = [root._id];
      return wongo.save('MockTree', child1, function(err, doc) {
        child1 = doc;
        assert.equal(doc.parent, root._id);
        assert.equal(doc.ancestors[0], root._id);
        return done();
      });
    });
    it('should add a child to the child', function(done) {
      child11 = {
        name: 'child11'
      };
      child11.ancestors = [root._id, child1._id];
      return wongo.save('MockTree', child11, function(err, doc) {
        child11 = doc;
        assert.equal(doc.parent, child1._id);
        assert.equal(doc.ancestors[0], root._id);
        assert.equal(doc.ancestors[1], child1._id);
        return done();
      });
    });
    it('should get all ascendants of child11', function(done) {
      return wongo.findById('MockTree', child11._id, function(err, result) {
        assert.ok(result);
        assert.equal(result.ancestors.length, 2);
        assert.equal(result.ancestors[0], root._id);
        assert.equal(result.ancestors[1], child1._id);
        return done();
      });
    });
    it('should get all descendants of root', function(done) {
      var query;
      query = {
        ancestors: root._id
      };
      return wongo.find('MockTree', query, function(err, result) {
        var child, _i, _len;
        assert.ok(result);
        assert.equal(result.length, 2);
        for (_i = 0, _len = result.length; _i < _len; _i++) {
          child = result[_i];
          if (child.name !== 'child1' && child.name !== 'child11') {
            assert.ok(false);
          }
        }
        return done();
      });
    });
    it('should get all children of root', function(done) {
      var query;
      query = {
        parent: root._id
      };
      return wongo.find('MockTree', query, function(err, result) {
        assert.ok(result);
        assert.equal(result.length, 1);
        assert.equal(result[0].name, child1.name);
        assert.equal(result[0].parent, root._id);
        assert.equal(result[0].ancestors[0], root._id);
        return done();
      });
    });
    it('should try to remove child1 and remove child11', function(done) {
      return wongo.remove('MockTree', child1._id, function(err) {
        assert.ok(!err);
        return done();
      });
    });
    return it('should verify that child11 was removed', function(done) {
      return wongo.findById('MockTree', child11._id, function(err, result) {
        assert.ok(!err);
        assert.ok(!result);
        return done();
      });
    });
  });

}).call(this);
