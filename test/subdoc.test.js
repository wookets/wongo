//@ sourceMappingURL=subdoc.test.map
// Generated by CoffeeScript 1.6.1
(function() {
  var assert, wongo;

  assert = require('assert');

  wongo = require('../lib/wongo');

  wongo.schema('MockSubdoc', {
    fields: {
      name: String,
      subdoc: {
        name: String,
        m1: {
          type: Number
        },
        m2: {
          type: Number
        }
      }
    }
  });

  describe('Wongo Subdoc', function() {
    var doc;
    doc = null;
    it('should save a doc with a subdoc', function(done) {
      doc = {
        name: 'wallace',
        subdoc: {
          name: 'grommit',
          m1: 1
        }
      };
      return wongo.save('MockSubdoc', doc, function(err, result) {
        assert.ifError(err);
        assert.equal(result.name, 'wallace');
        assert.equal(result.subdoc.m1, 1);
        return done();
      });
    });
    it('should update a doc with a subdoc', function(done) {
      doc.subdoc.m2 = 3;
      return wongo.save('MockSubdoc', doc, function(err, result) {
        assert.ifError(err);
        assert.equal(result.name, 'wallace');
        assert.equal(result.subdoc.m2, 3);
        return done();
      });
    });
    it('should update a partial doc with a subdoc', function(done) {
      var doc2;
      doc2 = {
        _id: doc._id,
        name: 'mocha',
        subdoc: {
          _id: doc.subdoc._id,
          m2: 5
        }
      };
      return wongo.save('MockSubdoc', doc2, function(err, result) {
        assert.ifError(err);
        assert.equal(result.name, 'mocha');
        assert.equal(result.subdoc.m2, 5);
        assert.ok(!result.subdoc.m1);
        return done();
      });
    });
    return it('should update a partial doc with a subdoc', function(done) {
      var doc2;
      doc2 = {
        _id: doc._id,
        name: 'mint',
        subdoc: {
          m2: 15
        }
      };
      return wongo.save('MockSubdoc', doc2, function(err, result) {
        assert.ifError(err);
        assert.equal(result.name, 'mint');
        assert.equal(result.subdoc.m2, 15);
        assert.notEqual(result.subdoc._id, doc.subdoc._id);
        return done();
      });
    });
  });

}).call(this);
