//@ sourceMappingURL=strict.test.map
// Generated by CoffeeScript 1.6.1
(function() {
  var assert, wongo;

  assert = require('assert');

  wongo = require('../lib/wongo');

  wongo.schema('MockStrict', {
    fields: {
      name: String,
      mixed: {
        type: 'mixed'
      },
      child: {
        name: String,
        grandchild: {
          name: String
        }
      },
      children: [
        {
          name: String,
          grandchildren: [
            {
              name: String
            }
          ]
        }
      ]
    }
  });

  describe('Wongo Strict', function() {
    it('should prune any values not on the schema', function(done) {
      var doc;
      doc = {
        name: 'wallace',
        dog: 'gromit'
      };
      return wongo.save('MockStrict', doc, function(err, result) {
        assert.ifError(err);
        assert.equal(result.name, 'wallace');
        assert.ok(!result.dog);
        return done();
      });
    });
    it('should ignore if something is put into a mixed type property', function(done) {
      var doc;
      doc = {
        name: 'meow',
        mixed: 'stinger'
      };
      return wongo.save('MockStrict', doc, function(err, result) {
        assert.ifError(err);
        assert.equal(result.name, 'meow');
        assert.equal(result.mixed, 'stinger');
        return done();
      });
    });
    it('should prune any values not on a child schema', function(done) {
      var doc;
      doc = {
        name: 'wallace',
        child: {
          name: 'pete',
          dog: 'grommit'
        }
      };
      return wongo.save('MockStrict', doc, function(err, result) {
        assert.ifError(err);
        assert.equal(result.child.name, 'pete');
        assert.ok(!result.child.dog);
        return done();
      });
    });
    it('should prune any values not on a grandchild schema', function(done) {
      var doc;
      doc = {
        name: 'wallace',
        child: {
          name: 'pete',
          grandchild: {
            name: 'bum',
            dog: 'buca'
          }
        }
      };
      return wongo.save('MockStrict', doc, function(err, result) {
        assert.ifError(err);
        assert.equal(result.child.grandchild.name, 'bum');
        assert.ok(!result.child.grandchild.dog);
        return done();
      });
    });
    return it('should prune any values not on a children schema', function(done) {
      var doc;
      doc = {
        name: 'wallace',
        children: [
          {
            name: 'bum',
            dog: 'meow'
          }
        ]
      };
      return wongo.save('MockStrict', doc, function(err, result) {
        assert.ifError(err);
        assert.equal(result.children[0].name, 'bum');
        assert.ok(!result.children[0].dog);
        return done();
      });
    });
  });

}).call(this);
