//@ sourceMappingURL=hooks.test.map
// Generated by CoffeeScript 1.6.1
(function() {
  var assert, wongo;

  assert = require('assert');

  wongo = require('../lib/wongo');

  describe('Wongo Schema Hook Override', function() {
    describe('Prune', function() {
      wongo.schema('MockHookDisablePrune', {
        fields: {
          name: String
        },
        hooks: {
          prune: false
        }
      });
      it('should be able to disable prune', function(done) {
        return wongo.save('MockHookDisablePrune', {
          name: 'Cherry',
          field2: 'ImSafe'
        }, function(err, result) {
          assert.ifError(err);
          assert.equal(result.field2, 'ImSafe');
          return done();
        });
      });
      return it.skip('should be able to override prune', function(done) {
        return done();
      });
    });
    describe('Defaults', function() {
      wongo.schema('MockHookDisableDefaults', {
        fields: {
          name: String,
          animal: {
            type: String,
            "default": 'MooCow'
          }
        },
        hooks: {
          applyDefaults: false
        }
      });
      it('should be able to disable defaults', function(done) {
        return wongo.save('MockHookDisableDefaults', {
          name: 'Snufy'
        }, function(err, result) {
          assert.ifError(err);
          assert.notEqual(result.animal, 'MooCow');
          return done();
        });
      });
      return it.skip('should be able to override defaults', function(done) {
        return done();
      });
    });
    describe('Validate', function() {
      wongo.schema('MockHookDisableValidate', {
        fields: {
          name: {
            type: String,
            max: 3
          }
        },
        hooks: {
          validate: false
        }
      });
      it('should be able to disable validate', function(done) {
        return wongo.save('MockHookDisableValidate', {
          name: 'Fetry'
        }, function(err, result) {
          assert.ifError(err);
          assert.equal(result.name, 'Fetry');
          return done();
        });
      });
      return it.skip('should be able to override validate', function(done) {
        return done();
      });
    });
    return describe('BeforeSave', function() {
      wongo.schema('MockHookUserDefined', {
        fields: {
          name: String,
          beforeSave: String,
          afterSave: String
        },
        hooks: {
          beforeSave: function(document, schema, done) {
            document.beforeSave = 'meowpants';
            return done();
          },
          afterSave: function(document, schema, done) {
            document.afterSave = 'meower';
            return done();
          }
        }
      });
      it('should be able to handle a user defined beforeSave function', function(done) {
        return wongo.save('MockHookUserDefined', {
          name: 'Fetter'
        }, function(err, result) {
          assert.ifError(err);
          assert.equal(result.beforeSave, 'meowpants');
          return done();
        });
      });
      return it('should be able to handle a user defined afterSave function', function(done) {
        return wongo.save('MockHookUserDefined', {
          name: 'Fetter'
        }, function(err, result) {
          assert.ifError(err);
          assert.equal(result.afterSave, 'meower');
          return done();
        });
      });
    });
  });

}).call(this);
